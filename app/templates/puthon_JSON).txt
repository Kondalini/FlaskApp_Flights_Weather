mport mimetypes
from flask import Flask, request, jsonify
from flask import render_template

import requests

app = Flask(__name__)

@app.route('/')
def home():
   return render_template('index.html')  # This will render index.html
  


# API keys
WEATHER_API_KEY = '93980c5df83ff5b63ff872da7dd478ea'
WEATHER_BASE_URL = "http://api.openweathermap.org/data/2.5/weather"

FLIGHTS_API_KEY = "fdbe84ce39bc2cf61895e80bf3c6f9f3"
FLIGHTS_BASE_URL = "https://api.aviationstack.com/v1/flights"
FUTURE_FLIGHTS_BASE_URL = "https://api.aviationstack.com/v1/flightsFuture"

CITY_TO_IATA = {
    'Sofia': 'SOF',
    'New York': 'JFK',
    'London': 'LHR',
    'Berlin': 'TXL',
    'Paris': 'CDG',
    'Tokyo': 'HND',
    'Dubai': 'DXB',
    'Moscow': 'SVO',
    'Los Angeles': 'LAX',
    'Chicago': 'ORD',
    'San Francisco': 'SFO',
    'Miami': 'MIA'
}

def kelvin_to_celsius(temp_k):
    return round(temp_k - 273.15)

@app.route('/weather', methods=['GET'])
def get_weather():
    city = request.args.get('city')
    try:
        response = requests.get(f"{WEATHER_BASE_URL}?q={city}&appid={WEATHER_API_KEY}")
        if response.status_code == 200:
            data = response.json()
            temp = kelvin_to_celsius(data['main']['temp'])
            weather_description = data['weather'][0]['description']
            return jsonify({'city': city, 'temperature': temp, 'description': weather_description})
        else:
            return jsonify({'error': f"Failed to fetch weather data for {city}"}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/flights', methods=['GET'])
def get_flights():
    arrival_city = request.args.get('arrival_city')
    departure_city = request.args.get('departure_city')

    arrival_iata = CITY_TO_IATA.get(arrival_city)
    departure_iata = CITY_TO_IATA.get(departure_city)

    if not arrival_iata or not departure_iata:
        return jsonify({'error': 'Invalid city name.'}), 400

    try:
        response = requests.get(f"{FLIGHTS_BASE_URL}?access_key={FLIGHTS_API_KEY}&arr_iata={arrival_iata}&dep_iata={departure_iata}")
        if response.status_code == 200:
            data = response.json()
            flights = []
            for flight in data.get('data', [])[:10]:
                flights.append({
                    'airline': flight['airline']['name'],
                    'flight_number': flight['flight']['number'],
                    'flight_date': flight['flight_date'],
                    'flight_status': flight.get('flight_status', "N/A")
                })
            return jsonify({'flights': flights})
        else:
            return jsonify({'error': 'Failed to fetch flight data.'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/future-flights', methods=['GET'])
def get_future_flights():
    departure_city = request.args.get('departure_city')
    arrival_city = request.args.get('arrival_city')
    flight_date = request.args.get('flight_date')

    departure_iata = CITY_TO_IATA.get(departure_city)
    arrival_iata = CITY_TO_IATA.get(arrival_city)

    if not departure_iata or not arrival_iata:
        return jsonify({'error': 'Invalid city name.'}), 400

    try:
        response = requests.get(f"{FUTURE_FLIGHTS_BASE_URL}?access_key={FLIGHTS_API_KEY}&iataCode={departure_iata}&type=departure&date={flight_date}")
        if response.status_code == 200:
            data = response.json()
            flights = []
            for flight in data.get('data', [])[:10]:
                flights.append({
                    'airline': flight['airline']['name'],
                    'flight_number': flight['flight']['number'],
                    'departure_time': flight['departure'].get('scheduled', 'N/A'),
                    'arrival_time': flight['arrival'].get('scheduled', 'N/A')
                })
            return jsonify({'flights': flights})
        else:
            return jsonify({'error': 'Failed to fetch future flight data.'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0')
